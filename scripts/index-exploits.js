import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Directory structure for scanning
const repos = {
  'ext-remover': {
    path: 'repos/ext-remover',
    type: 'exploit-tools'
  },
  'corellium': {
    path: 'repos/corellium',
    type: 'collection'
  },
  'chromebook-utilities': {
    path: 'repos/chromebook-utilities',
    type: 'collection'
  }
};

const exploits = [];
const tools = [];
const games = [];
const proxies = [];
const resources = [];

// Recursively scan directory
function scanDirectory(dir, category, source) {
  if (!fs.existsSync(dir)) {
    console.log(`Directory not found: ${dir}`);
    return;
  }

  const items = fs.readdirSync(dir);

  for (const item of items) {
    const itemPath = path.join(dir, item);
    const stat = fs.statSync(itemPath);

    if (stat.isDirectory()) {
      // Recursively scan subdirectories
      scanDirectory(itemPath, item, source);
    } else if (stat.isFile()) {
      // Index the file
      indexFile(itemPath, category, source, item);
    }
  }
}

function indexFile(filePath, category, source, filename) {
  const ext = path.extname(filename);
  const name = path.basename(filename, ext);

  const item = {
    id: `${source}-${name.toLowerCase().replace(/[^a-z0-9]/g, '-')}`,
    title: name.replace(/[_-]/g, ' '),
    filename: filename,
    path: filePath,
    category: category,
    source: source,
    type: ext === '.txt' ? 'link' : ext === '.html' ? 'page' : ext === '.js' ? 'script' : 'file',
    dateIndexed: new Date().toISOString().split('T')[0]
  };

  // Categorize based on directory
  if (category.toLowerCase().includes('exploit') || 
      category.toLowerCase().includes('tool') ||
      category.toLowerCase().includes('bypass')) {
    exploits.push(item);
  } else if (category.toLowerCase().includes('prx') || 
             category.toLowerCase().includes('proxy')) {
    proxies.push(item);
  } else if (category.toLowerCase().includes('gxme') || 
             category.toLowerCase().includes('game')) {
    games.push(item);
  } else if (category.toLowerCase().includes('tutorial') ||
             category.toLowerCase().includes('guide')) {
    resources.push(item);
  } else {
    tools.push(item);
  }
}

// Main indexing function
function indexAllRepos() {
  console.log('Starting repository indexing...\n');

  // Scan ext-remover
  if (fs.existsSync('repos/ext-remover')) {
    console.log('Indexing ext-remover...');
    scanDirectory('repos/ext-remover', 'ext-remover', 'ext-remover');
  }

  // Scan Corellium - by category
  if (fs.existsSync('repos/corellium')) {
    console.log('Indexing Corellium...');
    const corelliumDirs = [
      'Advanced Cheats',
      'Exploits and Tools',
      'Prxes Collection',
      'Game Library',
      'Hubs',
      'OS',
      'Tutorials',
      'Bookmarklets'
    ];
    
    corelliumDirs.forEach(dir => {
      const fullPath = path.join('repos/corellium', dir);
      if (fs.existsSync(fullPath)) {
        scanDirectory(fullPath, dir, 'corellium');
      }
    });
  }

  // Scan chromebook-utilities - by category
  if (fs.existsSync('repos/chromebook-utilities')) {
    console.log('Indexing chromebook-utilities...');
    const utilsDirs = [
      'Exploits',
      'Prxes',
      'Mixes (Prxes)',
      'Gxmes',
      'OS',
      'Tutorials',
      'Cheats'
    ];
    
    utilsDirs.forEach(dir => {
      const fullPath = path.join('repos/chromebook-utilities', dir);
      if (fs.existsSync(fullPath)) {
        scanDirectory(fullPath, dir, 'chromebook-utilities');
      }
    });
  }

  // Generate statistics
  console.log('\n=== Indexing Complete ===');
  console.log(`Total Exploits: ${exploits.length}`);
  console.log(`Total Tools: ${tools.length}`);
  console.log(`Total Proxies: ${proxies.length}`);
  console.log(`Total Games: ${games.length}`);
  console.log(`Total Resources: ${resources.length}`);
  console.log(`Grand Total: ${exploits.length + tools.length + proxies.length + games.length + resources.length}`);

  // Save to JSON files
  const outputDir = 'src/data/indexed';
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  fs.writeFileSync(
    path.join(outputDir, 'exploits-index.json'),
    JSON.stringify(exploits, null, 2)
  );
  fs.writeFileSync(
    path.join(outputDir, 'tools-index.json'),
    JSON.stringify(tools, null, 2)
  );
  fs.writeFileSync(
    path.join(outputDir, 'proxies-index.json'),
    JSON.stringify(proxies, null, 2)
  );
  fs.writeFileSync(
    path.join(outputDir, 'games-index.json'),
    JSON.stringify(games, null, 2)
  );
  fs.writeFileSync(
    path.join(outputDir, 'resources-index.json'),
    JSON.stringify(resources, null, 2)
  );

  // Generate combined index
  const combinedIndex = {
    exploits,
    tools,
    proxies,
    games,
    resources,
    stats: {
      total: exploits.length + tools.length + proxies.length + games.length + resources.length,
      exploits: exploits.length,
      tools: tools.length,
      proxies: proxies.length,
      games: games.length,
      resources: resources.length,
      lastIndexed: new Date().toISOString()
    }
  };

  fs.writeFileSync(
    path.join(outputDir, 'complete-index.json'),
    JSON.stringify(combinedIndex, null, 2)
  );

  console.log(`\nIndex files saved to ${outputDir}/`);
}

// Run indexer
indexAllRepos();

